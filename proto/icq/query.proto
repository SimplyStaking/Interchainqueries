syntax = "proto3";
package simplyvc.interchainqueries.icq;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "icq/icq_timeouts.proto";
import "icq/periodic_icq.proto";
import "icq/pending_icq.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/simplyvc/interchainqueries/x/icq/types";

// Query defines the gRPC querier service.
service Query { 
	// Queries a Pending ICQ Request by id.
	rpc PendingICQsRequest(QueryGetPendingICQsRequest) returns (QueryGetPendingICQsRequestResponse) {
		option (google.api.http).get = "/simplyvc/interchainqueries/icq/pending_icq_request/{id}";
	}

	// Queries a list of Pending ICQ Request items.
	rpc PendingICQsRequestAll(QueryAllPendingICQsRequest) returns (QueryAllPendingICQsRequestResponse) {
		option (google.api.http).get = "/simplyvc/interchainqueries/icq/pending_icq_request";
	}

	// Queries a Timedout ICQ by id.
	rpc ICQTimeouts(QueryGetICQTimeoutsRequest) returns (QueryGetICQTimeoutsResponse) {
		option (google.api.http).get = "/simplyvc/interchainqueries/icq/interchainquery_timedout/{id}";
	}

	// Queries a list of ICQ Timedout items.
	rpc ICQTimeoutsAll(QueryAllICQTimeoutsRequest) returns (QueryAllICQTimeoutsResponse) {
		option (google.api.http).get = "/simplyvc/interchainqueries/icq/interchainquery_timedout";
	}

	// Queries a periodic ICQ
	rpc PeriodicICQs(QueryGetPeriodicICQsRequest) returns (QueryGetPeriodicICQsResponse) {
		option (google.api.http).get = "/simplyvc/interchainqueries/icq/interchainquery_periodic/{id}";
	}

	// Queries a list of all periodic ICQs
	rpc PeriodicICQsAll(QueryAllPeriodicICQsRequest) returns (QueryAllPeriodicICQsResponse) {
		option (google.api.http).get = "/simplyvc/interchainqueries/icq/interchainquery_periodic";
	}
	// this line is used by starport scaffolding # 2
}

message QueryGetPendingICQsRequest {
	uint64 id = 1;
}

message QueryGetPendingICQsRequestResponse {
	PendingICQsRequest PendingICQsRequest = 1 [(gogoproto.nullable) = false];
}

message QueryAllPendingICQsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPendingICQsRequestResponse {
	repeated PendingICQsRequest PendingICQsRequest = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetICQTimeoutsRequest {
	uint64 id = 1;
}

message QueryGetICQTimeoutsResponse {
	ICQTimeouts ICQTimeouts = 1 [(gogoproto.nullable) = false];
}

message QueryAllICQTimeoutsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllICQTimeoutsResponse {
	repeated ICQTimeouts ICQTimeouts = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetPeriodicICQsRequest {
	uint64 id = 1;
}

message QueryGetPeriodicICQsResponse {
	PeriodicICQs PeriodicICQs = 1 [(gogoproto.nullable) = false];
}

message QueryAllPeriodicICQsRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPeriodicICQsResponse {
	repeated PeriodicICQs PeriodicICQs = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
