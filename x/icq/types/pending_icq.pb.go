// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: icq/pending_icq.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PendingICQInstance is one instance of a request query. This is done to remove
// duplicate fields, we keep a pointer of the periodic query in this instance
// so we can trace back to all the requested fields.
type PendingICQInstance struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeoutHeight uint64 `protobuf:"varint,2,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
	TargetHeight  uint64 `protobuf:"varint,3,opt,name=target_height,json=targetHeight,proto3" json:"target_height,omitempty"`
	PeriodicId    uint64 `protobuf:"varint,4,opt,name=periodic_id,json=periodicId,proto3" json:"periodic_id,omitempty"`
}

func (m *PendingICQInstance) Reset()         { *m = PendingICQInstance{} }
func (m *PendingICQInstance) String() string { return proto.CompactTextString(m) }
func (*PendingICQInstance) ProtoMessage()    {}
func (*PendingICQInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb23dfe41bec70fc, []int{0}
}
func (m *PendingICQInstance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingICQInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingICQInstance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingICQInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingICQInstance.Merge(m, src)
}
func (m *PendingICQInstance) XXX_Size() int {
	return m.Size()
}
func (m *PendingICQInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingICQInstance.DiscardUnknown(m)
}

var xxx_messageInfo_PendingICQInstance proto.InternalMessageInfo

func (m *PendingICQInstance) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PendingICQInstance) GetTimeoutHeight() uint64 {
	if m != nil {
		return m.TimeoutHeight
	}
	return 0
}

func (m *PendingICQInstance) GetTargetHeight() uint64 {
	if m != nil {
		return m.TargetHeight
	}
	return 0
}

func (m *PendingICQInstance) GetPeriodicId() uint64 {
	if m != nil {
		return m.PeriodicId
	}
	return 0
}

// PendingICQsRequest is the full request we combine Periodic Query Data as well
// as the PendingICQs data, so that relayers can process the requests.
type PendingICQsRequest struct {
	Id            uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SingleIcq     []*IndividualICQ `protobuf:"bytes,2,rep,name=singleIcq,proto3" json:"singleIcq,omitempty"`
	TimeoutHeight uint64           `protobuf:"varint,3,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height,omitempty"`
	TargetHeight  uint64           `protobuf:"varint,4,opt,name=target_height,json=targetHeight,proto3" json:"target_height,omitempty"`
	ClientId      string           `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	PeriodicId    uint64           `protobuf:"varint,6,opt,name=periodic_id,json=periodicId,proto3" json:"periodic_id,omitempty"`
}

func (m *PendingICQsRequest) Reset()         { *m = PendingICQsRequest{} }
func (m *PendingICQsRequest) String() string { return proto.CompactTextString(m) }
func (*PendingICQsRequest) ProtoMessage()    {}
func (*PendingICQsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb23dfe41bec70fc, []int{1}
}
func (m *PendingICQsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingICQsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingICQsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingICQsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingICQsRequest.Merge(m, src)
}
func (m *PendingICQsRequest) XXX_Size() int {
	return m.Size()
}
func (m *PendingICQsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingICQsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PendingICQsRequest proto.InternalMessageInfo

func (m *PendingICQsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PendingICQsRequest) GetSingleIcq() []*IndividualICQ {
	if m != nil {
		return m.SingleIcq
	}
	return nil
}

func (m *PendingICQsRequest) GetTimeoutHeight() uint64 {
	if m != nil {
		return m.TimeoutHeight
	}
	return 0
}

func (m *PendingICQsRequest) GetTargetHeight() uint64 {
	if m != nil {
		return m.TargetHeight
	}
	return 0
}

func (m *PendingICQsRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func (m *PendingICQsRequest) GetPeriodicId() uint64 {
	if m != nil {
		return m.PeriodicId
	}
	return 0
}

func init() {
	proto.RegisterType((*PendingICQInstance)(nil), "simplyvc.interchainqueries.icq.PendingICQInstance")
	proto.RegisterType((*PendingICQsRequest)(nil), "simplyvc.interchainqueries.icq.PendingICQsRequest")
}

func init() { proto.RegisterFile("icq/pending_icq.proto", fileDescriptor_fb23dfe41bec70fc) }

var fileDescriptor_fb23dfe41bec70fc = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4e, 0xc2, 0x40,
	0x14, 0x85, 0x69, 0x41, 0x22, 0x83, 0xb0, 0x68, 0xa2, 0x69, 0x34, 0x19, 0x09, 0xc6, 0x84, 0x8d,
	0x6d, 0xd4, 0x37, 0x90, 0x8d, 0x13, 0x36, 0xd2, 0xa5, 0x1b, 0x52, 0x66, 0x6e, 0xda, 0x9b, 0x94,
	0xe9, 0xcf, 0x4c, 0x89, 0xbc, 0x85, 0xbe, 0x95, 0x4b, 0x96, 0x2e, 0x0d, 0x3c, 0x86, 0x1b, 0x43,
	0x0b, 0x12, 0x81, 0x18, 0xb7, 0x5f, 0xcf, 0x69, 0xce, 0x37, 0x97, 0x9c, 0x22, 0x4f, 0xdd, 0x04,
	0xa4, 0x40, 0x19, 0x8c, 0x90, 0xa7, 0x4e, 0x92, 0xc5, 0x3a, 0xb6, 0xa8, 0xc2, 0x49, 0x12, 0xcd,
	0xa6, 0xdc, 0x41, 0xa9, 0x21, 0xe3, 0xa1, 0x8f, 0x32, 0xcd, 0x21, 0x43, 0x50, 0x0e, 0xf2, 0xf4,
	0xfc, 0xac, 0xac, 0x65, 0x18, 0x0b, 0xe4, 0xdb, 0x5e, 0xf7, 0xcd, 0x20, 0xd6, 0x53, 0xf9, 0x37,
	0xd6, 0x1f, 0x32, 0xa9, 0xb4, 0x2f, 0x39, 0x58, 0x6d, 0x62, 0xa2, 0xb0, 0x8d, 0x8e, 0xd1, 0xab,
	0x79, 0x26, 0x0a, 0xeb, 0x9a, 0xb4, 0x35, 0x4e, 0x20, 0xce, 0xf5, 0x28, 0x04, 0x0c, 0x42, 0x6d,
	0x9b, 0xc5, 0xb7, 0xd6, 0x9a, 0x3e, 0x16, 0xd0, 0xba, 0x22, 0x2d, 0xed, 0x67, 0x01, 0xfc, 0xa4,
	0xaa, 0x45, 0xea, 0xa4, 0x84, 0xeb, 0xd0, 0x25, 0x69, 0x6e, 0x87, 0x08, 0xbb, 0x56, 0x44, 0xc8,
	0x06, 0x31, 0xd1, 0xfd, 0xfa, 0xb5, 0x49, 0x79, 0x90, 0xe6, 0xa0, 0xf4, 0xde, 0xa6, 0x01, 0x69,
	0x28, 0x94, 0x41, 0x04, 0x8c, 0xa7, 0xb6, 0xd9, 0xa9, 0xf6, 0x9a, 0x77, 0x37, 0xce, 0xdf, 0xcf,
	0xe0, 0x30, 0x29, 0x70, 0x8a, 0x22, 0xf7, 0x23, 0xd6, 0x1f, 0x7a, 0xdb, 0xfe, 0x01, 0xc1, 0xea,
	0xbf, 0x04, 0x6b, 0x07, 0x04, 0x2f, 0x48, 0x83, 0x47, 0x08, 0x52, 0xaf, 0xf4, 0x8e, 0x3a, 0x46,
	0xaf, 0xe1, 0x1d, 0x97, 0x80, 0x89, 0x5d, 0xfb, 0xfa, 0xae, 0xfd, 0xc3, 0xe0, 0x7d, 0x41, 0x8d,
	0xf9, 0x82, 0x1a, 0x9f, 0x0b, 0x6a, 0xbc, 0x2e, 0x69, 0x65, 0xbe, 0xa4, 0x95, 0x8f, 0x25, 0xad,
	0x3c, 0xdf, 0x06, 0xa8, 0xc3, 0x7c, 0xec, 0xf0, 0x78, 0xe2, 0x6e, 0x3c, 0xdd, 0x3d, 0x4f, 0xf7,
	0xc5, 0x5d, 0xdd, 0x5a, 0xcf, 0x12, 0x50, 0xe3, 0x7a, 0x71, 0xe5, 0xfb, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x69, 0xab, 0x6e, 0x94, 0x36, 0x02, 0x00, 0x00,
}

func (m *PendingICQInstance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingICQInstance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingICQInstance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeriodicId != 0 {
		i = encodeVarintPendingIcq(dAtA, i, uint64(m.PeriodicId))
		i--
		dAtA[i] = 0x20
	}
	if m.TargetHeight != 0 {
		i = encodeVarintPendingIcq(dAtA, i, uint64(m.TargetHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.TimeoutHeight != 0 {
		i = encodeVarintPendingIcq(dAtA, i, uint64(m.TimeoutHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPendingIcq(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingICQsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingICQsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingICQsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeriodicId != 0 {
		i = encodeVarintPendingIcq(dAtA, i, uint64(m.PeriodicId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ClientId) > 0 {
		i -= len(m.ClientId)
		copy(dAtA[i:], m.ClientId)
		i = encodeVarintPendingIcq(dAtA, i, uint64(len(m.ClientId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TargetHeight != 0 {
		i = encodeVarintPendingIcq(dAtA, i, uint64(m.TargetHeight))
		i--
		dAtA[i] = 0x20
	}
	if m.TimeoutHeight != 0 {
		i = encodeVarintPendingIcq(dAtA, i, uint64(m.TimeoutHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SingleIcq) > 0 {
		for iNdEx := len(m.SingleIcq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SingleIcq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPendingIcq(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintPendingIcq(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPendingIcq(dAtA []byte, offset int, v uint64) int {
	offset -= sovPendingIcq(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PendingICQInstance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPendingIcq(uint64(m.Id))
	}
	if m.TimeoutHeight != 0 {
		n += 1 + sovPendingIcq(uint64(m.TimeoutHeight))
	}
	if m.TargetHeight != 0 {
		n += 1 + sovPendingIcq(uint64(m.TargetHeight))
	}
	if m.PeriodicId != 0 {
		n += 1 + sovPendingIcq(uint64(m.PeriodicId))
	}
	return n
}

func (m *PendingICQsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPendingIcq(uint64(m.Id))
	}
	if len(m.SingleIcq) > 0 {
		for _, e := range m.SingleIcq {
			l = e.Size()
			n += 1 + l + sovPendingIcq(uint64(l))
		}
	}
	if m.TimeoutHeight != 0 {
		n += 1 + sovPendingIcq(uint64(m.TimeoutHeight))
	}
	if m.TargetHeight != 0 {
		n += 1 + sovPendingIcq(uint64(m.TargetHeight))
	}
	l = len(m.ClientId)
	if l > 0 {
		n += 1 + l + sovPendingIcq(uint64(l))
	}
	if m.PeriodicId != 0 {
		n += 1 + sovPendingIcq(uint64(m.PeriodicId))
	}
	return n
}

func sovPendingIcq(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPendingIcq(x uint64) (n int) {
	return sovPendingIcq(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PendingICQInstance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPendingIcq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingICQInstance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingICQInstance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			m.TimeoutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetHeight", wireType)
			}
			m.TargetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicId", wireType)
			}
			m.PeriodicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPendingIcq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPendingIcq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingICQsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPendingIcq
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingICQsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingICQsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleIcq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPendingIcq
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPendingIcq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SingleIcq = append(m.SingleIcq, &IndividualICQ{})
			if err := m.SingleIcq[len(m.SingleIcq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			m.TimeoutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetHeight", wireType)
			}
			m.TargetHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPendingIcq
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPendingIcq
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicId", wireType)
			}
			m.PeriodicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPendingIcq(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPendingIcq
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPendingIcq(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPendingIcq
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPendingIcq
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPendingIcq
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPendingIcq
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPendingIcq
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPendingIcq        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPendingIcq          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPendingIcq = fmt.Errorf("proto: unexpected end of group")
)
