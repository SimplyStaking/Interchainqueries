// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: icq/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetPendingICQRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPendingICQRequest) Reset()         { *m = QueryGetPendingICQRequest{} }
func (m *QueryGetPendingICQRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingICQRequest) ProtoMessage()    {}
func (*QueryGetPendingICQRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{0}
}
func (m *QueryGetPendingICQRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingICQRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingICQRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingICQRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingICQRequest.Merge(m, src)
}
func (m *QueryGetPendingICQRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingICQRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingICQRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingICQRequest proto.InternalMessageInfo

func (m *QueryGetPendingICQRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPendingICQRequestResponse struct {
	PendingICQRequest PendingICQRequest `protobuf:"bytes,1,opt,name=PendingICQRequest,proto3" json:"PendingICQRequest"`
}

func (m *QueryGetPendingICQRequestResponse) Reset()         { *m = QueryGetPendingICQRequestResponse{} }
func (m *QueryGetPendingICQRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingICQRequestResponse) ProtoMessage()    {}
func (*QueryGetPendingICQRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{1}
}
func (m *QueryGetPendingICQRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingICQRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingICQRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingICQRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingICQRequestResponse.Merge(m, src)
}
func (m *QueryGetPendingICQRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingICQRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingICQRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingICQRequestResponse proto.InternalMessageInfo

func (m *QueryGetPendingICQRequestResponse) GetPendingICQRequest() PendingICQRequest {
	if m != nil {
		return m.PendingICQRequest
	}
	return PendingICQRequest{}
}

type QueryAllPendingICQRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingICQRequest) Reset()         { *m = QueryAllPendingICQRequest{} }
func (m *QueryAllPendingICQRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingICQRequest) ProtoMessage()    {}
func (*QueryAllPendingICQRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{2}
}
func (m *QueryAllPendingICQRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingICQRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingICQRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingICQRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingICQRequest.Merge(m, src)
}
func (m *QueryAllPendingICQRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingICQRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingICQRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingICQRequest proto.InternalMessageInfo

func (m *QueryAllPendingICQRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPendingICQRequestResponse struct {
	PendingICQRequest []PendingICQRequest `protobuf:"bytes,1,rep,name=PendingICQRequest,proto3" json:"PendingICQRequest"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingICQRequestResponse) Reset()         { *m = QueryAllPendingICQRequestResponse{} }
func (m *QueryAllPendingICQRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingICQRequestResponse) ProtoMessage()    {}
func (*QueryAllPendingICQRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{3}
}
func (m *QueryAllPendingICQRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingICQRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingICQRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingICQRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingICQRequestResponse.Merge(m, src)
}
func (m *QueryAllPendingICQRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingICQRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingICQRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingICQRequestResponse proto.InternalMessageInfo

func (m *QueryAllPendingICQRequestResponse) GetPendingICQRequest() []PendingICQRequest {
	if m != nil {
		return m.PendingICQRequest
	}
	return nil
}

func (m *QueryAllPendingICQRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetICQResultRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetICQResultRequest) Reset()         { *m = QueryGetICQResultRequest{} }
func (m *QueryGetICQResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetICQResultRequest) ProtoMessage()    {}
func (*QueryGetICQResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{4}
}
func (m *QueryGetICQResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetICQResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetICQResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetICQResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetICQResultRequest.Merge(m, src)
}
func (m *QueryGetICQResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetICQResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetICQResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetICQResultRequest proto.InternalMessageInfo

func (m *QueryGetICQResultRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetICQResultResponse struct {
	ICQResult ICQResult `protobuf:"bytes,1,opt,name=ICQResult,proto3" json:"ICQResult"`
}

func (m *QueryGetICQResultResponse) Reset()         { *m = QueryGetICQResultResponse{} }
func (m *QueryGetICQResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetICQResultResponse) ProtoMessage()    {}
func (*QueryGetICQResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{5}
}
func (m *QueryGetICQResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetICQResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetICQResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetICQResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetICQResultResponse.Merge(m, src)
}
func (m *QueryGetICQResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetICQResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetICQResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetICQResultResponse proto.InternalMessageInfo

func (m *QueryGetICQResultResponse) GetICQResult() ICQResult {
	if m != nil {
		return m.ICQResult
	}
	return ICQResult{}
}

type QueryAllICQResultRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllICQResultRequest) Reset()         { *m = QueryAllICQResultRequest{} }
func (m *QueryAllICQResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllICQResultRequest) ProtoMessage()    {}
func (*QueryAllICQResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{6}
}
func (m *QueryAllICQResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllICQResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllICQResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllICQResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllICQResultRequest.Merge(m, src)
}
func (m *QueryAllICQResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllICQResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllICQResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllICQResultRequest proto.InternalMessageInfo

func (m *QueryAllICQResultRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllICQResultResponse struct {
	ICQResult  []ICQResult         `protobuf:"bytes,1,rep,name=ICQResult,proto3" json:"ICQResult"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllICQResultResponse) Reset()         { *m = QueryAllICQResultResponse{} }
func (m *QueryAllICQResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllICQResultResponse) ProtoMessage()    {}
func (*QueryAllICQResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{7}
}
func (m *QueryAllICQResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllICQResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllICQResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllICQResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllICQResultResponse.Merge(m, src)
}
func (m *QueryAllICQResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllICQResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllICQResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllICQResultResponse proto.InternalMessageInfo

func (m *QueryAllICQResultResponse) GetICQResult() []ICQResult {
	if m != nil {
		return m.ICQResult
	}
	return nil
}

func (m *QueryAllICQResultResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDataPointResultRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetDataPointResultRequest) Reset()         { *m = QueryGetDataPointResultRequest{} }
func (m *QueryGetDataPointResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDataPointResultRequest) ProtoMessage()    {}
func (*QueryGetDataPointResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{8}
}
func (m *QueryGetDataPointResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDataPointResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDataPointResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDataPointResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDataPointResultRequest.Merge(m, src)
}
func (m *QueryGetDataPointResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDataPointResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDataPointResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDataPointResultRequest proto.InternalMessageInfo

func (m *QueryGetDataPointResultRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetDataPointResultResponse struct {
	DataPointResult DataPointResult `protobuf:"bytes,1,opt,name=DataPointResult,proto3" json:"DataPointResult"`
}

func (m *QueryGetDataPointResultResponse) Reset()         { *m = QueryGetDataPointResultResponse{} }
func (m *QueryGetDataPointResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDataPointResultResponse) ProtoMessage()    {}
func (*QueryGetDataPointResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{9}
}
func (m *QueryGetDataPointResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDataPointResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDataPointResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDataPointResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDataPointResultResponse.Merge(m, src)
}
func (m *QueryGetDataPointResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDataPointResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDataPointResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDataPointResultResponse proto.InternalMessageInfo

func (m *QueryGetDataPointResultResponse) GetDataPointResult() DataPointResult {
	if m != nil {
		return m.DataPointResult
	}
	return DataPointResult{}
}

type QueryAllDataPointResultRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDataPointResultRequest) Reset()         { *m = QueryAllDataPointResultRequest{} }
func (m *QueryAllDataPointResultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDataPointResultRequest) ProtoMessage()    {}
func (*QueryAllDataPointResultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{10}
}
func (m *QueryAllDataPointResultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDataPointResultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDataPointResultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDataPointResultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDataPointResultRequest.Merge(m, src)
}
func (m *QueryAllDataPointResultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDataPointResultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDataPointResultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDataPointResultRequest proto.InternalMessageInfo

func (m *QueryAllDataPointResultRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDataPointResultResponse struct {
	DataPointResult []DataPointResult   `protobuf:"bytes,1,rep,name=DataPointResult,proto3" json:"DataPointResult"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDataPointResultResponse) Reset()         { *m = QueryAllDataPointResultResponse{} }
func (m *QueryAllDataPointResultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDataPointResultResponse) ProtoMessage()    {}
func (*QueryAllDataPointResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{11}
}
func (m *QueryAllDataPointResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDataPointResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDataPointResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDataPointResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDataPointResultResponse.Merge(m, src)
}
func (m *QueryAllDataPointResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDataPointResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDataPointResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDataPointResultResponse proto.InternalMessageInfo

func (m *QueryAllDataPointResultResponse) GetDataPointResult() []DataPointResult {
	if m != nil {
		return m.DataPointResult
	}
	return nil
}

func (m *QueryAllDataPointResultResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetICQTimeoutsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetICQTimeoutsRequest) Reset()         { *m = QueryGetICQTimeoutsRequest{} }
func (m *QueryGetICQTimeoutsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetICQTimeoutsRequest) ProtoMessage()    {}
func (*QueryGetICQTimeoutsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{12}
}
func (m *QueryGetICQTimeoutsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetICQTimeoutsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetICQTimeoutsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetICQTimeoutsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetICQTimeoutsRequest.Merge(m, src)
}
func (m *QueryGetICQTimeoutsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetICQTimeoutsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetICQTimeoutsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetICQTimeoutsRequest proto.InternalMessageInfo

func (m *QueryGetICQTimeoutsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetICQTimeoutsResponse struct {
	ICQTimeouts ICQTimeouts `protobuf:"bytes,1,opt,name=ICQTimeouts,proto3" json:"ICQTimeouts"`
}

func (m *QueryGetICQTimeoutsResponse) Reset()         { *m = QueryGetICQTimeoutsResponse{} }
func (m *QueryGetICQTimeoutsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetICQTimeoutsResponse) ProtoMessage()    {}
func (*QueryGetICQTimeoutsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{13}
}
func (m *QueryGetICQTimeoutsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetICQTimeoutsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetICQTimeoutsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetICQTimeoutsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetICQTimeoutsResponse.Merge(m, src)
}
func (m *QueryGetICQTimeoutsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetICQTimeoutsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetICQTimeoutsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetICQTimeoutsResponse proto.InternalMessageInfo

func (m *QueryGetICQTimeoutsResponse) GetICQTimeouts() ICQTimeouts {
	if m != nil {
		return m.ICQTimeouts
	}
	return ICQTimeouts{}
}

type QueryAllICQTimeoutsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllICQTimeoutsRequest) Reset()         { *m = QueryAllICQTimeoutsRequest{} }
func (m *QueryAllICQTimeoutsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllICQTimeoutsRequest) ProtoMessage()    {}
func (*QueryAllICQTimeoutsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{14}
}
func (m *QueryAllICQTimeoutsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllICQTimeoutsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllICQTimeoutsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllICQTimeoutsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllICQTimeoutsRequest.Merge(m, src)
}
func (m *QueryAllICQTimeoutsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllICQTimeoutsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllICQTimeoutsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllICQTimeoutsRequest proto.InternalMessageInfo

func (m *QueryAllICQTimeoutsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllICQTimeoutsResponse struct {
	ICQTimeouts []ICQTimeouts       `protobuf:"bytes,1,rep,name=ICQTimeouts,proto3" json:"ICQTimeouts"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllICQTimeoutsResponse) Reset()         { *m = QueryAllICQTimeoutsResponse{} }
func (m *QueryAllICQTimeoutsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllICQTimeoutsResponse) ProtoMessage()    {}
func (*QueryAllICQTimeoutsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{15}
}
func (m *QueryAllICQTimeoutsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllICQTimeoutsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllICQTimeoutsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllICQTimeoutsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllICQTimeoutsResponse.Merge(m, src)
}
func (m *QueryAllICQTimeoutsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllICQTimeoutsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllICQTimeoutsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllICQTimeoutsResponse proto.InternalMessageInfo

func (m *QueryAllICQTimeoutsResponse) GetICQTimeouts() []ICQTimeouts {
	if m != nil {
		return m.ICQTimeouts
	}
	return nil
}

func (m *QueryAllICQTimeoutsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPeriodicICQRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPeriodicICQRequest) Reset()         { *m = QueryGetPeriodicICQRequest{} }
func (m *QueryGetPeriodicICQRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPeriodicICQRequest) ProtoMessage()    {}
func (*QueryGetPeriodicICQRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{16}
}
func (m *QueryGetPeriodicICQRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPeriodicICQRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPeriodicICQRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPeriodicICQRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPeriodicICQRequest.Merge(m, src)
}
func (m *QueryGetPeriodicICQRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPeriodicICQRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPeriodicICQRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPeriodicICQRequest proto.InternalMessageInfo

func (m *QueryGetPeriodicICQRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPeriodicICQResponse struct {
	PeriodicICQ PeriodicICQ `protobuf:"bytes,1,opt,name=PeriodicICQ,proto3" json:"PeriodicICQ"`
}

func (m *QueryGetPeriodicICQResponse) Reset()         { *m = QueryGetPeriodicICQResponse{} }
func (m *QueryGetPeriodicICQResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPeriodicICQResponse) ProtoMessage()    {}
func (*QueryGetPeriodicICQResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{17}
}
func (m *QueryGetPeriodicICQResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPeriodicICQResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPeriodicICQResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPeriodicICQResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPeriodicICQResponse.Merge(m, src)
}
func (m *QueryGetPeriodicICQResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPeriodicICQResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPeriodicICQResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPeriodicICQResponse proto.InternalMessageInfo

func (m *QueryGetPeriodicICQResponse) GetPeriodicICQ() PeriodicICQ {
	if m != nil {
		return m.PeriodicICQ
	}
	return PeriodicICQ{}
}

type QueryAllPeriodicICQRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPeriodicICQRequest) Reset()         { *m = QueryAllPeriodicICQRequest{} }
func (m *QueryAllPeriodicICQRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPeriodicICQRequest) ProtoMessage()    {}
func (*QueryAllPeriodicICQRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{18}
}
func (m *QueryAllPeriodicICQRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPeriodicICQRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPeriodicICQRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPeriodicICQRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPeriodicICQRequest.Merge(m, src)
}
func (m *QueryAllPeriodicICQRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPeriodicICQRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPeriodicICQRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPeriodicICQRequest proto.InternalMessageInfo

func (m *QueryAllPeriodicICQRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPeriodicICQResponse struct {
	PeriodicICQ []PeriodicICQ       `protobuf:"bytes,1,rep,name=PeriodicICQ,proto3" json:"PeriodicICQ"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPeriodicICQResponse) Reset()         { *m = QueryAllPeriodicICQResponse{} }
func (m *QueryAllPeriodicICQResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPeriodicICQResponse) ProtoMessage()    {}
func (*QueryAllPeriodicICQResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{19}
}
func (m *QueryAllPeriodicICQResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPeriodicICQResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPeriodicICQResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPeriodicICQResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPeriodicICQResponse.Merge(m, src)
}
func (m *QueryAllPeriodicICQResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPeriodicICQResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPeriodicICQResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPeriodicICQResponse proto.InternalMessageInfo

func (m *QueryAllPeriodicICQResponse) GetPeriodicICQ() []PeriodicICQ {
	if m != nil {
		return m.PeriodicICQ
	}
	return nil
}

func (m *QueryAllPeriodicICQResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetPendingICQRequest)(nil), "simplyvc.interchainqueries.icq.QueryGetPendingICQRequest")
	proto.RegisterType((*QueryGetPendingICQRequestResponse)(nil), "simplyvc.interchainqueries.icq.QueryGetPendingICQRequestResponse")
	proto.RegisterType((*QueryAllPendingICQRequest)(nil), "simplyvc.interchainqueries.icq.QueryAllPendingICQRequest")
	proto.RegisterType((*QueryAllPendingICQRequestResponse)(nil), "simplyvc.interchainqueries.icq.QueryAllPendingICQRequestResponse")
	proto.RegisterType((*QueryGetICQResultRequest)(nil), "simplyvc.interchainqueries.icq.QueryGetICQResultRequest")
	proto.RegisterType((*QueryGetICQResultResponse)(nil), "simplyvc.interchainqueries.icq.QueryGetICQResultResponse")
	proto.RegisterType((*QueryAllICQResultRequest)(nil), "simplyvc.interchainqueries.icq.QueryAllICQResultRequest")
	proto.RegisterType((*QueryAllICQResultResponse)(nil), "simplyvc.interchainqueries.icq.QueryAllICQResultResponse")
	proto.RegisterType((*QueryGetDataPointResultRequest)(nil), "simplyvc.interchainqueries.icq.QueryGetDataPointResultRequest")
	proto.RegisterType((*QueryGetDataPointResultResponse)(nil), "simplyvc.interchainqueries.icq.QueryGetDataPointResultResponse")
	proto.RegisterType((*QueryAllDataPointResultRequest)(nil), "simplyvc.interchainqueries.icq.QueryAllDataPointResultRequest")
	proto.RegisterType((*QueryAllDataPointResultResponse)(nil), "simplyvc.interchainqueries.icq.QueryAllDataPointResultResponse")
	proto.RegisterType((*QueryGetICQTimeoutsRequest)(nil), "simplyvc.interchainqueries.icq.QueryGetICQTimeoutsRequest")
	proto.RegisterType((*QueryGetICQTimeoutsResponse)(nil), "simplyvc.interchainqueries.icq.QueryGetICQTimeoutsResponse")
	proto.RegisterType((*QueryAllICQTimeoutsRequest)(nil), "simplyvc.interchainqueries.icq.QueryAllICQTimeoutsRequest")
	proto.RegisterType((*QueryAllICQTimeoutsResponse)(nil), "simplyvc.interchainqueries.icq.QueryAllICQTimeoutsResponse")
	proto.RegisterType((*QueryGetPeriodicICQRequest)(nil), "simplyvc.interchainqueries.icq.QueryGetPeriodicICQRequest")
	proto.RegisterType((*QueryGetPeriodicICQResponse)(nil), "simplyvc.interchainqueries.icq.QueryGetPeriodicICQResponse")
	proto.RegisterType((*QueryAllPeriodicICQRequest)(nil), "simplyvc.interchainqueries.icq.QueryAllPeriodicICQRequest")
	proto.RegisterType((*QueryAllPeriodicICQResponse)(nil), "simplyvc.interchainqueries.icq.QueryAllPeriodicICQResponse")
}

func init() { proto.RegisterFile("icq/query.proto", fileDescriptor_62e8b96125860947) }

var fileDescriptor_62e8b96125860947 = []byte{
	// 921 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcd, 0x6e, 0xeb, 0x44,
	0x14, 0xc7, 0x33, 0x49, 0x41, 0xea, 0x14, 0xb5, 0x30, 0x2a, 0xa8, 0x04, 0xe4, 0x82, 0x17, 0x7c,
	0xb4, 0xc8, 0x6e, 0x5a, 0x15, 0xd2, 0x54, 0x6d, 0x49, 0x0b, 0x54, 0x08, 0x21, 0xa5, 0x81, 0x15,
	0x9b, 0xc8, 0xb1, 0x47, 0xee, 0x20, 0xc7, 0xe3, 0xc4, 0x4e, 0x45, 0x84, 0xd8, 0x74, 0xc9, 0x0a,
	0x89, 0x27, 0xe0, 0x19, 0x58, 0xb2, 0x44, 0x48, 0x95, 0x2a, 0x74, 0x7b, 0xd5, 0xcd, 0x5d, 0x5d,
	0x5d, 0xb5, 0xf7, 0x41, 0xae, 0x3c, 0x1e, 0x37, 0x8e, 0x3f, 0x62, 0xc7, 0x71, 0x77, 0xd5, 0x99,
	0x39, 0x67, 0xce, 0xef, 0xfc, 0x67, 0x72, 0x4e, 0x0d, 0x57, 0x88, 0xda, 0x97, 0xfb, 0x43, 0x3c,
	0x18, 0x49, 0xd6, 0x80, 0x3a, 0x14, 0x09, 0x36, 0xe9, 0x59, 0xc6, 0xe8, 0x42, 0x95, 0x88, 0xe9,
	0xe0, 0x81, 0x7a, 0xae, 0x10, 0xd3, 0x5d, 0x27, 0xd8, 0x96, 0x88, 0xda, 0xaf, 0xae, 0xea, 0x54,
	0xa7, 0x6c, 0xab, 0xec, 0xfe, 0xe5, 0x79, 0x55, 0xdf, 0xd7, 0x29, 0xd5, 0x0d, 0x2c, 0x2b, 0x16,
	0x91, 0x15, 0xd3, 0xa4, 0x8e, 0xe2, 0x10, 0x6a, 0xda, 0x7c, 0x75, 0x43, 0xa5, 0x76, 0x8f, 0xda,
	0x72, 0x57, 0xb1, 0xb1, 0x77, 0x98, 0x7c, 0x51, 0xeb, 0x62, 0x47, 0xa9, 0xc9, 0x96, 0xa2, 0x13,
	0x93, 0x6d, 0xe6, 0x7b, 0x57, 0xdd, 0x84, 0x88, 0xda, 0xef, 0x0c, 0xb0, 0x3d, 0x34, 0x1c, 0x6e,
	0x7d, 0xc7, 0xb7, 0x3a, 0xa4, 0x87, 0xe9, 0xd0, 0xb1, 0x83, 0x76, 0x0b, 0x0f, 0x08, 0xd5, 0x88,
	0xda, 0x21, 0x6a, 0x9f, 0xdb, 0xdf, 0xf6, 0xec, 0xa6, 0x46, 0x4c, 0x7d, 0x6c, 0x16, 0x37, 0xe1,
	0xbb, 0x67, 0xee, 0xf1, 0xa7, 0xd8, 0x69, 0x79, 0x8b, 0xdf, 0x9e, 0x9c, 0xb5, 0x71, 0x7f, 0x88,
	0x6d, 0x07, 0x2d, 0xc3, 0x32, 0xd1, 0xd6, 0xc0, 0x07, 0xe0, 0x93, 0x85, 0x76, 0x99, 0x68, 0xe2,
	0xef, 0x00, 0x7e, 0x98, 0xb8, 0xbb, 0x8d, 0x6d, 0x8b, 0x9a, 0x36, 0x46, 0x18, 0xbe, 0x15, 0x59,
	0x64, 0x41, 0x96, 0xb6, 0x6b, 0xd2, 0xf4, 0x5a, 0x4a, 0x11, 0xc7, 0xe3, 0x85, 0xab, 0xe7, 0xeb,
	0xa5, 0x76, 0x34, 0xa2, 0xa8, 0xf2, 0xcc, 0x9b, 0x86, 0x11, 0xcd, 0xfc, 0x1b, 0x08, 0xc7, 0x75,
	0xe4, 0x87, 0x7f, 0x24, 0x79, 0x45, 0x97, 0xdc, 0xa2, 0x4b, 0x9e, 0xc2, 0xbc, 0xe8, 0x52, 0x4b,
	0xd1, 0xb1, 0xcf, 0x11, 0xf0, 0x14, 0x6f, 0x7d, 0xe2, 0xb8, 0x53, 0xd2, 0x88, 0x2b, 0xc5, 0x12,
	0xa3, 0xd3, 0x09, 0xa8, 0x32, 0x83, 0xfa, 0x38, 0x15, 0xca, 0xcb, 0x71, 0x82, 0x6a, 0x03, 0xae,
	0xf9, 0x32, 0xb2, 0xf0, 0xee, 0xb5, 0x4a, 0xd2, 0xfc, 0xe7, 0xf1, 0x05, 0x09, 0xec, 0xe5, 0xe0,
	0xdf, 0xc3, 0xc5, 0x07, 0x23, 0xaf, 0xf2, 0xa7, 0x69, 0xc0, 0x0f, 0x0e, 0x1c, 0x74, 0x1c, 0x41,
	0xec, 0xf2, 0xbc, 0x9a, 0x86, 0x11, 0xc9, 0xab, 0x28, 0x45, 0xff, 0x06, 0xe3, 0x7b, 0x93, 0x0a,
	0x54, 0x99, 0x0f, 0xa8, 0x38, 0xc5, 0xb6, 0xa0, 0xe0, 0xab, 0xf0, 0x95, 0xe2, 0x28, 0x2d, 0x4a,
	0x4c, 0x27, 0x49, 0xb7, 0x45, 0xa6, 0xdb, 0x25, 0x80, 0xeb, 0x89, 0x2e, 0x9c, 0xb6, 0x03, 0x57,
	0x42, 0x4b, 0xbc, 0xb0, 0x72, 0x1a, 0x73, 0xc8, 0x8d, 0x93, 0x87, 0xa3, 0x89, 0xe7, 0x3c, 0xed,
	0xa6, 0x61, 0x24, 0xa4, 0x5d, 0x94, 0xac, 0xd7, 0x3e, 0x6e, 0xdc, 0x51, 0xd3, 0x70, 0x2b, 0xc5,
	0xe1, 0x16, 0x27, 0xf7, 0x67, 0xb0, 0x1a, 0x78, 0x74, 0x3f, 0xf2, 0x5f, 0xf8, 0xa4, 0x27, 0x3a,
	0x80, 0xef, 0xc5, 0xee, 0xe6, 0xd8, 0x3f, 0xc0, 0xa5, 0x80, 0x99, 0xd7, 0x78, 0x33, 0xc3, 0xad,
	0xf6, 0x5d, 0x38, 0x6e, 0x30, 0x8a, 0xa8, 0xf1, 0x0c, 0xbd, 0x57, 0x14, 0xce, 0xb0, 0x28, 0x55,
	0xff, 0x01, 0x1c, 0x2d, 0x7c, 0x4c, 0x12, 0x5a, 0x65, 0x7e, 0xb4, 0x47, 0x51, 0xb1, 0xc5, 0x1b,
	0xf2, 0x94, 0xe6, 0x1a, 0x50, 0x71, 0x62, 0xf7, 0x18, 0x35, 0x60, 0xce, 0xaa, 0x62, 0xc0, 0xc5,
	0x47, 0x0d, 0x98, 0x82, 0x2a, 0xc6, 0x64, 0xf8, 0x18, 0x2a, 0x66, 0x42, 0xab, 0xcc, 0x8f, 0x56,
	0x98, 0x8a, 0xdb, 0x7f, 0xbd, 0x09, 0x5f, 0x63, 0xd9, 0xa3, 0x5b, 0x10, 0xd3, 0xe7, 0xd1, 0x5e,
	0x5a, 0xa2, 0x89, 0x13, 0x53, 0xb5, 0x99, 0xdb, 0xd5, 0xcf, 0x54, 0xfc, 0xf2, 0xf2, 0xf6, 0xe5,
	0x9f, 0xe5, 0x06, 0xaa, 0xcb, 0x7e, 0x28, 0x39, 0x12, 0x4a, 0x0e, 0x8d, 0x7e, 0x9d, 0x81, 0x17,
	0x44, 0xfe, 0x95, 0x68, 0xbf, 0xa1, 0xa7, 0x00, 0xae, 0x46, 0xe2, 0x37, 0x0d, 0x23, 0x23, 0x58,
	0xdc, 0x60, 0x94, 0x11, 0x6c, 0xda, 0x4c, 0x25, 0xee, 0x33, 0xb0, 0x5d, 0xb4, 0x93, 0x03, 0x0c,
	0xfd, 0x07, 0x02, 0x7d, 0x1c, 0xd5, 0xb3, 0x96, 0x39, 0x3c, 0x74, 0x54, 0xf7, 0x72, 0x78, 0xf2,
	0xfc, 0x4f, 0x58, 0xfe, 0x07, 0x68, 0x3f, 0x2d, 0xff, 0x49, 0xeb, 0x88, 0x4f, 0xf9, 0x9e, 0x36,
	0xff, 0x02, 0xf8, 0xc6, 0x43, 0x68, 0x57, 0x93, 0x7a, 0xd6, 0xc2, 0xe6, 0x44, 0x89, 0x1b, 0x8a,
	0xc4, 0x43, 0x86, 0x52, 0x47, 0x9f, 0xe7, 0x43, 0x71, 0x6f, 0x58, 0xa4, 0x55, 0x1e, 0x66, 0xad,
	0x6c, 0xfc, 0xdc, 0x50, 0x3d, 0xca, 0xed, 0xcf, 0xa1, 0x0e, 0x18, 0xd4, 0x17, 0x68, 0x37, 0x0d,
	0x4a, 0x53, 0x1c, 0xc5, 0x72, 0x03, 0x4c, 0x28, 0xf3, 0x04, 0x40, 0x14, 0x0a, 0xed, 0xea, 0x73,
	0x98, 0xb5, 0xca, 0x73, 0x61, 0x25, 0xcf, 0x38, 0x62, 0x9d, 0x61, 0x6d, 0xa3, 0xad, 0x59, 0xb1,
	0xd0, 0xff, 0x60, 0xa2, 0x99, 0xa2, 0xc6, 0x0c, 0x77, 0x3f, 0xd4, 0xff, 0xab, 0xfb, 0xb9, 0x7c,
	0x39, 0xc2, 0xd7, 0x0c, 0xe1, 0x08, 0x1d, 0xcc, 0x7a, 0xdd, 0xdc, 0xff, 0x84, 0x35, 0x3a, 0xe4,
	0x0a, 0x5d, 0x03, 0xb8, 0x1c, 0x08, 0xef, 0xaa, 0xd3, 0x98, 0xe1, 0x0d, 0xe4, 0x43, 0x8a, 0x9f,
	0x53, 0xb2, 0xff, 0x4a, 0x27, 0x21, 0x31, 0x75, 0x82, 0xed, 0xad, 0x91, 0xbd, 0x75, 0x84, 0xfb,
	0x7a, 0x76, 0x75, 0x62, 0x9a, 0x75, 0x7e, 0x75, 0xfc, 0x6f, 0x12, 0x63, 0x75, 0x02, 0xe1, 0x67,
	0x52, 0x27, 0x37, 0x52, 0xfc, 0xfc, 0x91, 0x5f, 0x1d, 0x1f, 0xe9, 0xf8, 0xbb, 0xab, 0x3b, 0x01,
	0xdc, 0xdc, 0x09, 0xe0, 0xc5, 0x9d, 0x00, 0xfe, 0xb8, 0x17, 0x4a, 0x37, 0xf7, 0x42, 0xe9, 0xd9,
	0xbd, 0x50, 0xfa, 0xa9, 0xa6, 0x13, 0xe7, 0x7c, 0xd8, 0x95, 0x54, 0xda, 0x9b, 0x16, 0xfd, 0x17,
	0x16, 0xdf, 0x19, 0x59, 0xd8, 0xee, 0xbe, 0xce, 0xbe, 0xcc, 0xec, 0xbc, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0x92, 0x8b, 0x04, 0x44, 0x89, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a Pending ICQ Request by id.
	PendingICQRequest(ctx context.Context, in *QueryGetPendingICQRequest, opts ...grpc.CallOption) (*QueryGetPendingICQRequestResponse, error)
	// Queries a list of Pending ICQ Request items.
	PendingICQRequestAll(ctx context.Context, in *QueryAllPendingICQRequest, opts ...grpc.CallOption) (*QueryAllPendingICQRequestResponse, error)
	// Queries a ICQResult by id.
	ICQResult(ctx context.Context, in *QueryGetICQResultRequest, opts ...grpc.CallOption) (*QueryGetICQResultResponse, error)
	// Queries a list of ICQResult items.
	ICQResultAll(ctx context.Context, in *QueryAllICQResultRequest, opts ...grpc.CallOption) (*QueryAllICQResultResponse, error)
	// Queries a DataPointResult by id.
	DataPointResult(ctx context.Context, in *QueryGetDataPointResultRequest, opts ...grpc.CallOption) (*QueryGetDataPointResultResponse, error)
	// Queries a list of DataPoint items.
	DataPointResultAll(ctx context.Context, in *QueryAllDataPointResultRequest, opts ...grpc.CallOption) (*QueryAllDataPointResultResponse, error)
	// Queries a Timedout ICQ by id.
	ICQTimeouts(ctx context.Context, in *QueryGetICQTimeoutsRequest, opts ...grpc.CallOption) (*QueryGetICQTimeoutsResponse, error)
	// Queries a list of ICQ Timedout items.
	ICQTimeoutsAll(ctx context.Context, in *QueryAllICQTimeoutsRequest, opts ...grpc.CallOption) (*QueryAllICQTimeoutsResponse, error)
	// Queries a periodic ICQ
	PeriodicICQ(ctx context.Context, in *QueryGetPeriodicICQRequest, opts ...grpc.CallOption) (*QueryGetPeriodicICQResponse, error)
	// Queries a list of all periodic ICQs
	PeriodicICQAll(ctx context.Context, in *QueryAllPeriodicICQRequest, opts ...grpc.CallOption) (*QueryAllPeriodicICQResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PendingICQRequest(ctx context.Context, in *QueryGetPendingICQRequest, opts ...grpc.CallOption) (*QueryGetPendingICQRequestResponse, error) {
	out := new(QueryGetPendingICQRequestResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/PendingICQRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingICQRequestAll(ctx context.Context, in *QueryAllPendingICQRequest, opts ...grpc.CallOption) (*QueryAllPendingICQRequestResponse, error) {
	out := new(QueryAllPendingICQRequestResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/PendingICQRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ICQResult(ctx context.Context, in *QueryGetICQResultRequest, opts ...grpc.CallOption) (*QueryGetICQResultResponse, error) {
	out := new(QueryGetICQResultResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/ICQResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ICQResultAll(ctx context.Context, in *QueryAllICQResultRequest, opts ...grpc.CallOption) (*QueryAllICQResultResponse, error) {
	out := new(QueryAllICQResultResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/ICQResultAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataPointResult(ctx context.Context, in *QueryGetDataPointResultRequest, opts ...grpc.CallOption) (*QueryGetDataPointResultResponse, error) {
	out := new(QueryGetDataPointResultResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/DataPointResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataPointResultAll(ctx context.Context, in *QueryAllDataPointResultRequest, opts ...grpc.CallOption) (*QueryAllDataPointResultResponse, error) {
	out := new(QueryAllDataPointResultResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/DataPointResultAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ICQTimeouts(ctx context.Context, in *QueryGetICQTimeoutsRequest, opts ...grpc.CallOption) (*QueryGetICQTimeoutsResponse, error) {
	out := new(QueryGetICQTimeoutsResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/ICQTimeouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ICQTimeoutsAll(ctx context.Context, in *QueryAllICQTimeoutsRequest, opts ...grpc.CallOption) (*QueryAllICQTimeoutsResponse, error) {
	out := new(QueryAllICQTimeoutsResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/ICQTimeoutsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PeriodicICQ(ctx context.Context, in *QueryGetPeriodicICQRequest, opts ...grpc.CallOption) (*QueryGetPeriodicICQResponse, error) {
	out := new(QueryGetPeriodicICQResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/PeriodicICQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PeriodicICQAll(ctx context.Context, in *QueryAllPeriodicICQRequest, opts ...grpc.CallOption) (*QueryAllPeriodicICQResponse, error) {
	out := new(QueryAllPeriodicICQResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/PeriodicICQAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a Pending ICQ Request by id.
	PendingICQRequest(context.Context, *QueryGetPendingICQRequest) (*QueryGetPendingICQRequestResponse, error)
	// Queries a list of Pending ICQ Request items.
	PendingICQRequestAll(context.Context, *QueryAllPendingICQRequest) (*QueryAllPendingICQRequestResponse, error)
	// Queries a ICQResult by id.
	ICQResult(context.Context, *QueryGetICQResultRequest) (*QueryGetICQResultResponse, error)
	// Queries a list of ICQResult items.
	ICQResultAll(context.Context, *QueryAllICQResultRequest) (*QueryAllICQResultResponse, error)
	// Queries a DataPointResult by id.
	DataPointResult(context.Context, *QueryGetDataPointResultRequest) (*QueryGetDataPointResultResponse, error)
	// Queries a list of DataPoint items.
	DataPointResultAll(context.Context, *QueryAllDataPointResultRequest) (*QueryAllDataPointResultResponse, error)
	// Queries a Timedout ICQ by id.
	ICQTimeouts(context.Context, *QueryGetICQTimeoutsRequest) (*QueryGetICQTimeoutsResponse, error)
	// Queries a list of ICQ Timedout items.
	ICQTimeoutsAll(context.Context, *QueryAllICQTimeoutsRequest) (*QueryAllICQTimeoutsResponse, error)
	// Queries a periodic ICQ
	PeriodicICQ(context.Context, *QueryGetPeriodicICQRequest) (*QueryGetPeriodicICQResponse, error)
	// Queries a list of all periodic ICQs
	PeriodicICQAll(context.Context, *QueryAllPeriodicICQRequest) (*QueryAllPeriodicICQResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PendingICQRequest(ctx context.Context, req *QueryGetPendingICQRequest) (*QueryGetPendingICQRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingICQRequest not implemented")
}
func (*UnimplementedQueryServer) PendingICQRequestAll(ctx context.Context, req *QueryAllPendingICQRequest) (*QueryAllPendingICQRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingICQRequestAll not implemented")
}
func (*UnimplementedQueryServer) ICQResult(ctx context.Context, req *QueryGetICQResultRequest) (*QueryGetICQResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ICQResult not implemented")
}
func (*UnimplementedQueryServer) ICQResultAll(ctx context.Context, req *QueryAllICQResultRequest) (*QueryAllICQResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ICQResultAll not implemented")
}
func (*UnimplementedQueryServer) DataPointResult(ctx context.Context, req *QueryGetDataPointResultRequest) (*QueryGetDataPointResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataPointResult not implemented")
}
func (*UnimplementedQueryServer) DataPointResultAll(ctx context.Context, req *QueryAllDataPointResultRequest) (*QueryAllDataPointResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataPointResultAll not implemented")
}
func (*UnimplementedQueryServer) ICQTimeouts(ctx context.Context, req *QueryGetICQTimeoutsRequest) (*QueryGetICQTimeoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ICQTimeouts not implemented")
}
func (*UnimplementedQueryServer) ICQTimeoutsAll(ctx context.Context, req *QueryAllICQTimeoutsRequest) (*QueryAllICQTimeoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ICQTimeoutsAll not implemented")
}
func (*UnimplementedQueryServer) PeriodicICQ(ctx context.Context, req *QueryGetPeriodicICQRequest) (*QueryGetPeriodicICQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeriodicICQ not implemented")
}
func (*UnimplementedQueryServer) PeriodicICQAll(ctx context.Context, req *QueryAllPeriodicICQRequest) (*QueryAllPeriodicICQResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeriodicICQAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PendingICQRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingICQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingICQRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/PendingICQRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingICQRequest(ctx, req.(*QueryGetPendingICQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingICQRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingICQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingICQRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/PendingICQRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingICQRequestAll(ctx, req.(*QueryAllPendingICQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ICQResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetICQResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ICQResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/ICQResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ICQResult(ctx, req.(*QueryGetICQResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ICQResultAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllICQResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ICQResultAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/ICQResultAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ICQResultAll(ctx, req.(*QueryAllICQResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataPointResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDataPointResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataPointResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/DataPointResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataPointResult(ctx, req.(*QueryGetDataPointResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataPointResultAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDataPointResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataPointResultAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/DataPointResultAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataPointResultAll(ctx, req.(*QueryAllDataPointResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ICQTimeouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetICQTimeoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ICQTimeouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/ICQTimeouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ICQTimeouts(ctx, req.(*QueryGetICQTimeoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ICQTimeoutsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllICQTimeoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ICQTimeoutsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/ICQTimeoutsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ICQTimeoutsAll(ctx, req.(*QueryAllICQTimeoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PeriodicICQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPeriodicICQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PeriodicICQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/PeriodicICQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PeriodicICQ(ctx, req.(*QueryGetPeriodicICQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PeriodicICQAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPeriodicICQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PeriodicICQAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/PeriodicICQAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PeriodicICQAll(ctx, req.(*QueryAllPeriodicICQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simplyvc.interchainqueries.icq.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PendingICQRequest",
			Handler:    _Query_PendingICQRequest_Handler,
		},
		{
			MethodName: "PendingICQRequestAll",
			Handler:    _Query_PendingICQRequestAll_Handler,
		},
		{
			MethodName: "ICQResult",
			Handler:    _Query_ICQResult_Handler,
		},
		{
			MethodName: "ICQResultAll",
			Handler:    _Query_ICQResultAll_Handler,
		},
		{
			MethodName: "DataPointResult",
			Handler:    _Query_DataPointResult_Handler,
		},
		{
			MethodName: "DataPointResultAll",
			Handler:    _Query_DataPointResultAll_Handler,
		},
		{
			MethodName: "ICQTimeouts",
			Handler:    _Query_ICQTimeouts_Handler,
		},
		{
			MethodName: "ICQTimeoutsAll",
			Handler:    _Query_ICQTimeoutsAll_Handler,
		},
		{
			MethodName: "PeriodicICQ",
			Handler:    _Query_PeriodicICQ_Handler,
		},
		{
			MethodName: "PeriodicICQAll",
			Handler:    _Query_PeriodicICQAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "icq/query.proto",
}

func (m *QueryGetPendingICQRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingICQRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingICQRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingICQRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingICQRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingICQRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingICQRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingICQRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingICQRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingICQRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingICQRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingICQRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingICQRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingICQRequest) > 0 {
		for iNdEx := len(m.PendingICQRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingICQRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetICQResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetICQResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetICQResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetICQResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetICQResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetICQResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ICQResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllICQResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllICQResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllICQResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllICQResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllICQResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllICQResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ICQResult) > 0 {
		for iNdEx := len(m.ICQResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ICQResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDataPointResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDataPointResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDataPointResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDataPointResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDataPointResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDataPointResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DataPointResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDataPointResultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDataPointResultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDataPointResultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDataPointResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDataPointResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDataPointResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DataPointResult) > 0 {
		for iNdEx := len(m.DataPointResult) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataPointResult[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetICQTimeoutsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetICQTimeoutsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetICQTimeoutsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetICQTimeoutsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetICQTimeoutsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetICQTimeoutsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ICQTimeouts.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllICQTimeoutsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllICQTimeoutsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllICQTimeoutsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllICQTimeoutsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllICQTimeoutsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllICQTimeoutsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ICQTimeouts) > 0 {
		for iNdEx := len(m.ICQTimeouts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ICQTimeouts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPeriodicICQRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPeriodicICQRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPeriodicICQRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPeriodicICQResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPeriodicICQResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPeriodicICQResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PeriodicICQ.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPeriodicICQRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPeriodicICQRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPeriodicICQRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPeriodicICQResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPeriodicICQResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPeriodicICQResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeriodicICQ) > 0 {
		for iNdEx := len(m.PeriodicICQ) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeriodicICQ[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetPendingICQRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPendingICQRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingICQRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPendingICQRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPendingICQRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingICQRequest) > 0 {
		for _, e := range m.PendingICQRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetICQResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetICQResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ICQResult.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllICQResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllICQResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ICQResult) > 0 {
		for _, e := range m.ICQResult {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDataPointResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDataPointResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DataPointResult.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDataPointResultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDataPointResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DataPointResult) > 0 {
		for _, e := range m.DataPointResult {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetICQTimeoutsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetICQTimeoutsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ICQTimeouts.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllICQTimeoutsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllICQTimeoutsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ICQTimeouts) > 0 {
		for _, e := range m.ICQTimeouts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPeriodicICQRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPeriodicICQResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PeriodicICQ.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPeriodicICQRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPeriodicICQResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeriodicICQ) > 0 {
		for _, e := range m.PeriodicICQ {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetPendingICQRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingICQRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingICQRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingICQRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingICQRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingICQRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingICQRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingICQRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingICQRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingICQRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingICQRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingICQRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingICQRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingICQRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingICQRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingICQRequest = append(m.PendingICQRequest, PendingICQRequest{})
			if err := m.PendingICQRequest[len(m.PendingICQRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetICQResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetICQResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetICQResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetICQResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetICQResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetICQResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ICQResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllICQResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllICQResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllICQResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllICQResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllICQResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllICQResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ICQResult = append(m.ICQResult, ICQResult{})
			if err := m.ICQResult[len(m.ICQResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDataPointResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDataPointResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDataPointResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDataPointResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDataPointResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDataPointResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPointResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataPointResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDataPointResultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDataPointResultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDataPointResultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDataPointResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDataPointResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDataPointResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPointResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPointResult = append(m.DataPointResult, DataPointResult{})
			if err := m.DataPointResult[len(m.DataPointResult)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetICQTimeoutsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetICQTimeoutsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetICQTimeoutsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetICQTimeoutsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetICQTimeoutsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetICQTimeoutsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ICQTimeouts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllICQTimeoutsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllICQTimeoutsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllICQTimeoutsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllICQTimeoutsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllICQTimeoutsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllICQTimeoutsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ICQTimeouts = append(m.ICQTimeouts, ICQTimeouts{})
			if err := m.ICQTimeouts[len(m.ICQTimeouts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPeriodicICQRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPeriodicICQRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPeriodicICQRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPeriodicICQResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPeriodicICQResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPeriodicICQResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicICQ", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PeriodicICQ.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPeriodicICQRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPeriodicICQRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPeriodicICQRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPeriodicICQResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPeriodicICQResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPeriodicICQResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicICQ", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeriodicICQ = append(m.PeriodicICQ, PeriodicICQ{})
			if err := m.PeriodicICQ[len(m.PeriodicICQ)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
