// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: icq/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetPendingICQsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPendingICQsRequest) Reset()         { *m = QueryGetPendingICQsRequest{} }
func (m *QueryGetPendingICQsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingICQsRequest) ProtoMessage()    {}
func (*QueryGetPendingICQsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{0}
}
func (m *QueryGetPendingICQsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingICQsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingICQsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingICQsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingICQsRequest.Merge(m, src)
}
func (m *QueryGetPendingICQsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingICQsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingICQsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingICQsRequest proto.InternalMessageInfo

func (m *QueryGetPendingICQsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPendingICQsRequestResponse struct {
	PendingICQsRequest PendingICQsRequest `protobuf:"bytes,1,opt,name=PendingICQsRequest,proto3" json:"PendingICQsRequest"`
}

func (m *QueryGetPendingICQsRequestResponse) Reset()         { *m = QueryGetPendingICQsRequestResponse{} }
func (m *QueryGetPendingICQsRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingICQsRequestResponse) ProtoMessage()    {}
func (*QueryGetPendingICQsRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{1}
}
func (m *QueryGetPendingICQsRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingICQsRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingICQsRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingICQsRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingICQsRequestResponse.Merge(m, src)
}
func (m *QueryGetPendingICQsRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingICQsRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingICQsRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingICQsRequestResponse proto.InternalMessageInfo

func (m *QueryGetPendingICQsRequestResponse) GetPendingICQsRequest() PendingICQsRequest {
	if m != nil {
		return m.PendingICQsRequest
	}
	return PendingICQsRequest{}
}

type QueryAllPendingICQsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingICQsRequest) Reset()         { *m = QueryAllPendingICQsRequest{} }
func (m *QueryAllPendingICQsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingICQsRequest) ProtoMessage()    {}
func (*QueryAllPendingICQsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{2}
}
func (m *QueryAllPendingICQsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingICQsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingICQsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingICQsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingICQsRequest.Merge(m, src)
}
func (m *QueryAllPendingICQsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingICQsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingICQsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingICQsRequest proto.InternalMessageInfo

func (m *QueryAllPendingICQsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPendingICQsRequestResponse struct {
	PendingICQsRequest []PendingICQsRequest `protobuf:"bytes,1,rep,name=PendingICQsRequest,proto3" json:"PendingICQsRequest"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingICQsRequestResponse) Reset()         { *m = QueryAllPendingICQsRequestResponse{} }
func (m *QueryAllPendingICQsRequestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingICQsRequestResponse) ProtoMessage()    {}
func (*QueryAllPendingICQsRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{3}
}
func (m *QueryAllPendingICQsRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingICQsRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingICQsRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingICQsRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingICQsRequestResponse.Merge(m, src)
}
func (m *QueryAllPendingICQsRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingICQsRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingICQsRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingICQsRequestResponse proto.InternalMessageInfo

func (m *QueryAllPendingICQsRequestResponse) GetPendingICQsRequest() []PendingICQsRequest {
	if m != nil {
		return m.PendingICQsRequest
	}
	return nil
}

func (m *QueryAllPendingICQsRequestResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetICQTimeoutsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetICQTimeoutsRequest) Reset()         { *m = QueryGetICQTimeoutsRequest{} }
func (m *QueryGetICQTimeoutsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetICQTimeoutsRequest) ProtoMessage()    {}
func (*QueryGetICQTimeoutsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{4}
}
func (m *QueryGetICQTimeoutsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetICQTimeoutsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetICQTimeoutsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetICQTimeoutsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetICQTimeoutsRequest.Merge(m, src)
}
func (m *QueryGetICQTimeoutsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetICQTimeoutsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetICQTimeoutsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetICQTimeoutsRequest proto.InternalMessageInfo

func (m *QueryGetICQTimeoutsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetICQTimeoutsResponse struct {
	ICQTimeouts ICQTimeouts `protobuf:"bytes,1,opt,name=ICQTimeouts,proto3" json:"ICQTimeouts"`
}

func (m *QueryGetICQTimeoutsResponse) Reset()         { *m = QueryGetICQTimeoutsResponse{} }
func (m *QueryGetICQTimeoutsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetICQTimeoutsResponse) ProtoMessage()    {}
func (*QueryGetICQTimeoutsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{5}
}
func (m *QueryGetICQTimeoutsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetICQTimeoutsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetICQTimeoutsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetICQTimeoutsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetICQTimeoutsResponse.Merge(m, src)
}
func (m *QueryGetICQTimeoutsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetICQTimeoutsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetICQTimeoutsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetICQTimeoutsResponse proto.InternalMessageInfo

func (m *QueryGetICQTimeoutsResponse) GetICQTimeouts() ICQTimeouts {
	if m != nil {
		return m.ICQTimeouts
	}
	return ICQTimeouts{}
}

type QueryAllICQTimeoutsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllICQTimeoutsRequest) Reset()         { *m = QueryAllICQTimeoutsRequest{} }
func (m *QueryAllICQTimeoutsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllICQTimeoutsRequest) ProtoMessage()    {}
func (*QueryAllICQTimeoutsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{6}
}
func (m *QueryAllICQTimeoutsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllICQTimeoutsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllICQTimeoutsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllICQTimeoutsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllICQTimeoutsRequest.Merge(m, src)
}
func (m *QueryAllICQTimeoutsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllICQTimeoutsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllICQTimeoutsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllICQTimeoutsRequest proto.InternalMessageInfo

func (m *QueryAllICQTimeoutsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllICQTimeoutsResponse struct {
	ICQTimeouts []ICQTimeouts       `protobuf:"bytes,1,rep,name=ICQTimeouts,proto3" json:"ICQTimeouts"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllICQTimeoutsResponse) Reset()         { *m = QueryAllICQTimeoutsResponse{} }
func (m *QueryAllICQTimeoutsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllICQTimeoutsResponse) ProtoMessage()    {}
func (*QueryAllICQTimeoutsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{7}
}
func (m *QueryAllICQTimeoutsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllICQTimeoutsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllICQTimeoutsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllICQTimeoutsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllICQTimeoutsResponse.Merge(m, src)
}
func (m *QueryAllICQTimeoutsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllICQTimeoutsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllICQTimeoutsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllICQTimeoutsResponse proto.InternalMessageInfo

func (m *QueryAllICQTimeoutsResponse) GetICQTimeouts() []ICQTimeouts {
	if m != nil {
		return m.ICQTimeouts
	}
	return nil
}

func (m *QueryAllICQTimeoutsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPeriodicICQsRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPeriodicICQsRequest) Reset()         { *m = QueryGetPeriodicICQsRequest{} }
func (m *QueryGetPeriodicICQsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPeriodicICQsRequest) ProtoMessage()    {}
func (*QueryGetPeriodicICQsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{8}
}
func (m *QueryGetPeriodicICQsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPeriodicICQsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPeriodicICQsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPeriodicICQsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPeriodicICQsRequest.Merge(m, src)
}
func (m *QueryGetPeriodicICQsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPeriodicICQsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPeriodicICQsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPeriodicICQsRequest proto.InternalMessageInfo

func (m *QueryGetPeriodicICQsRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPeriodicICQsResponse struct {
	PeriodicICQs PeriodicICQs `protobuf:"bytes,1,opt,name=PeriodicICQs,proto3" json:"PeriodicICQs"`
}

func (m *QueryGetPeriodicICQsResponse) Reset()         { *m = QueryGetPeriodicICQsResponse{} }
func (m *QueryGetPeriodicICQsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPeriodicICQsResponse) ProtoMessage()    {}
func (*QueryGetPeriodicICQsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{9}
}
func (m *QueryGetPeriodicICQsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPeriodicICQsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPeriodicICQsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPeriodicICQsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPeriodicICQsResponse.Merge(m, src)
}
func (m *QueryGetPeriodicICQsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPeriodicICQsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPeriodicICQsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPeriodicICQsResponse proto.InternalMessageInfo

func (m *QueryGetPeriodicICQsResponse) GetPeriodicICQs() PeriodicICQs {
	if m != nil {
		return m.PeriodicICQs
	}
	return PeriodicICQs{}
}

type QueryAllPeriodicICQsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPeriodicICQsRequest) Reset()         { *m = QueryAllPeriodicICQsRequest{} }
func (m *QueryAllPeriodicICQsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPeriodicICQsRequest) ProtoMessage()    {}
func (*QueryAllPeriodicICQsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{10}
}
func (m *QueryAllPeriodicICQsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPeriodicICQsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPeriodicICQsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPeriodicICQsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPeriodicICQsRequest.Merge(m, src)
}
func (m *QueryAllPeriodicICQsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPeriodicICQsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPeriodicICQsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPeriodicICQsRequest proto.InternalMessageInfo

func (m *QueryAllPeriodicICQsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPeriodicICQsResponse struct {
	PeriodicICQs []PeriodicICQs      `protobuf:"bytes,1,rep,name=PeriodicICQs,proto3" json:"PeriodicICQs"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPeriodicICQsResponse) Reset()         { *m = QueryAllPeriodicICQsResponse{} }
func (m *QueryAllPeriodicICQsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPeriodicICQsResponse) ProtoMessage()    {}
func (*QueryAllPeriodicICQsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_62e8b96125860947, []int{11}
}
func (m *QueryAllPeriodicICQsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPeriodicICQsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPeriodicICQsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPeriodicICQsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPeriodicICQsResponse.Merge(m, src)
}
func (m *QueryAllPeriodicICQsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPeriodicICQsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPeriodicICQsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPeriodicICQsResponse proto.InternalMessageInfo

func (m *QueryAllPeriodicICQsResponse) GetPeriodicICQs() []PeriodicICQs {
	if m != nil {
		return m.PeriodicICQs
	}
	return nil
}

func (m *QueryAllPeriodicICQsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetPendingICQsRequest)(nil), "simplyvc.interchainqueries.icq.QueryGetPendingICQsRequest")
	proto.RegisterType((*QueryGetPendingICQsRequestResponse)(nil), "simplyvc.interchainqueries.icq.QueryGetPendingICQsRequestResponse")
	proto.RegisterType((*QueryAllPendingICQsRequest)(nil), "simplyvc.interchainqueries.icq.QueryAllPendingICQsRequest")
	proto.RegisterType((*QueryAllPendingICQsRequestResponse)(nil), "simplyvc.interchainqueries.icq.QueryAllPendingICQsRequestResponse")
	proto.RegisterType((*QueryGetICQTimeoutsRequest)(nil), "simplyvc.interchainqueries.icq.QueryGetICQTimeoutsRequest")
	proto.RegisterType((*QueryGetICQTimeoutsResponse)(nil), "simplyvc.interchainqueries.icq.QueryGetICQTimeoutsResponse")
	proto.RegisterType((*QueryAllICQTimeoutsRequest)(nil), "simplyvc.interchainqueries.icq.QueryAllICQTimeoutsRequest")
	proto.RegisterType((*QueryAllICQTimeoutsResponse)(nil), "simplyvc.interchainqueries.icq.QueryAllICQTimeoutsResponse")
	proto.RegisterType((*QueryGetPeriodicICQsRequest)(nil), "simplyvc.interchainqueries.icq.QueryGetPeriodicICQsRequest")
	proto.RegisterType((*QueryGetPeriodicICQsResponse)(nil), "simplyvc.interchainqueries.icq.QueryGetPeriodicICQsResponse")
	proto.RegisterType((*QueryAllPeriodicICQsRequest)(nil), "simplyvc.interchainqueries.icq.QueryAllPeriodicICQsRequest")
	proto.RegisterType((*QueryAllPeriodicICQsResponse)(nil), "simplyvc.interchainqueries.icq.QueryAllPeriodicICQsResponse")
}

func init() { proto.RegisterFile("icq/query.proto", fileDescriptor_62e8b96125860947) }

var fileDescriptor_62e8b96125860947 = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcf, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x77, 0xb6, 0x55, 0x70, 0x2a, 0x2d, 0x0c, 0x56, 0x24, 0x96, 0x28, 0x39, 0xa8, 0x68,
	0x4d, 0x68, 0x8b, 0x20, 0x5d, 0x45, 0xdb, 0xa2, 0xa5, 0x78, 0x69, 0x57, 0xf1, 0xe0, 0x65, 0xc9,
	0x26, 0x43, 0x76, 0x20, 0x9b, 0x49, 0x32, 0xd9, 0xc5, 0x45, 0xbc, 0xf8, 0x07, 0x88, 0xe0, 0x9f,
	0xe3, 0xc1, 0x6b, 0x41, 0x94, 0x05, 0x45, 0x3d, 0x89, 0xec, 0xfa, 0x4f, 0x78, 0x93, 0x24, 0x13,
	0x36, 0x69, 0x92, 0x4d, 0x4c, 0x73, 0x5b, 0xde, 0xbc, 0x5f, 0x9f, 0xf7, 0xcd, 0xbc, 0x1d, 0xb8,
	0x42, 0x34, 0x47, 0x71, 0x06, 0xd8, 0x1d, 0xc9, 0xb6, 0x4b, 0x3d, 0x8a, 0x44, 0x46, 0xfa, 0xb6,
	0x39, 0x1a, 0x6a, 0x32, 0xb1, 0x3c, 0xec, 0x6a, 0x3d, 0x95, 0x58, 0xfe, 0x39, 0xc1, 0x4c, 0x26,
	0x9a, 0x23, 0x5c, 0x30, 0xa8, 0x41, 0x03, 0x57, 0xc5, 0xff, 0x15, 0x46, 0x09, 0x6b, 0x06, 0xa5,
	0x86, 0x89, 0x15, 0xd5, 0x26, 0x8a, 0x6a, 0x59, 0xd4, 0x53, 0x3d, 0x42, 0x2d, 0xc6, 0x4f, 0x6f,
	0x6a, 0x94, 0xf5, 0x29, 0x53, 0xba, 0x2a, 0xc3, 0x61, 0x31, 0x65, 0xb8, 0xd1, 0xc5, 0x9e, 0xba,
	0xa1, 0xd8, 0xaa, 0x41, 0xac, 0xc0, 0x99, 0xfb, 0x5e, 0xf4, 0x1b, 0x22, 0x9a, 0xd3, 0xf1, 0x48,
	0x1f, 0xd3, 0x81, 0xc7, 0xe2, 0x76, 0x1b, 0xbb, 0x84, 0xea, 0x44, 0xeb, 0x10, 0xcd, 0xe1, 0xf6,
	0xd5, 0xd0, 0x6e, 0xe9, 0xc4, 0x32, 0x66, 0x66, 0x69, 0x1d, 0x0a, 0x47, 0x7e, 0xa1, 0x7d, 0xec,
	0x1d, 0x86, 0x87, 0x07, 0x7b, 0x47, 0xac, 0x8d, 0x9d, 0x01, 0x66, 0x1e, 0x5a, 0x86, 0x4d, 0xa2,
	0x5f, 0x02, 0x57, 0xc1, 0x8d, 0xc5, 0x76, 0x93, 0xe8, 0xd2, 0x5b, 0x00, 0xa5, 0x7c, 0xf7, 0x36,
	0x66, 0x36, 0xb5, 0x18, 0x46, 0x3d, 0x88, 0xd2, 0xa7, 0x41, 0x9a, 0xa5, 0xcd, 0x4d, 0x79, 0xfe,
	0xe0, 0xe4, 0x74, 0xe4, 0xee, 0xe2, 0xf1, 0xaf, 0x2b, 0x8d, 0x76, 0x46, 0x4e, 0x49, 0xe7, 0xed,
	0xef, 0x98, 0x66, 0x46, 0xfb, 0x8f, 0x21, 0x9c, 0xcd, 0x8d, 0xd7, 0xbf, 0x26, 0x87, 0x43, 0x96,
	0xfd, 0x21, 0xcb, 0xa1, 0xa2, 0x7c, 0xc8, 0xf2, 0xa1, 0x6a, 0xe0, 0x88, 0x25, 0x16, 0x29, 0xfd,
	0x88, 0xb0, 0x33, 0xcb, 0x14, 0x62, 0x2f, 0xd4, 0x8d, 0x8d, 0xf6, 0x13, 0x60, 0xcd, 0x00, 0xec,
	0x7a, 0x21, 0x58, 0xd8, 0x66, 0x82, 0x2c, 0x26, 0xff, 0xc1, 0xde, 0xd1, 0x33, 0xfe, 0x29, 0xe5,
	0xc9, 0xef, 0xc2, 0xcb, 0x99, 0xde, 0x9c, 0xff, 0x29, 0x5c, 0x8a, 0x99, 0xf9, 0xbc, 0x6f, 0x15,
	0x81, 0xc7, 0x42, 0x38, 0x71, 0x3c, 0x4b, 0x5c, 0xe1, 0x8c, 0x0e, 0xeb, 0x52, 0xf8, 0x03, 0xe0,
	0x68, 0x27, 0xcb, 0xe4, 0xa1, 0x2d, 0x9c, 0x1e, 0xad, 0x3e, 0x15, 0x6f, 0xcf, 0x74, 0x39, 0xe4,
	0x37, 0x7f, 0xde, 0x2d, 0x1e, 0xc2, 0xb5, 0x6c, 0x77, 0x0e, 0xfb, 0x1c, 0x9e, 0x8f, 0xdb, 0xf9,
	0x58, 0xd7, 0x8b, 0xbf, 0xe0, 0x59, 0x0c, 0xc7, 0x4d, 0xe4, 0x91, 0xf0, 0x6c, 0xc6, 0x59, 0x6d,
	0xd6, 0xa5, 0xe5, 0x47, 0xc0, 0xf9, 0x52, 0x75, 0x72, 0xf9, 0x16, 0xea, 0xe0, 0xab, 0x4d, 0xcf,
	0xcd, 0xbf, 0xe7, 0xe0, 0x99, 0x80, 0x00, 0x7d, 0x07, 0x59, 0x3b, 0x05, 0x6d, 0x17, 0xf5, 0x9a,
	0xbf, 0xa4, 0x85, 0xdd, 0xea, 0xb1, 0x51, 0xb3, 0xd2, 0xc3, 0x37, 0x5f, 0xff, 0xbc, 0x6f, 0x6e,
	0xa3, 0xbb, 0x4a, 0x94, 0x4b, 0x49, 0xe5, 0x52, 0x4e, 0xfc, 0xe1, 0x74, 0xdc, 0x30, 0x89, 0xf2,
	0x8a, 0xe8, 0xaf, 0xd1, 0x37, 0x00, 0x57, 0xd3, 0x05, 0x76, 0x4c, 0xb3, 0x24, 0x5b, 0xe6, 0x26,
	0x2e, 0xc9, 0x36, 0x77, 0x8b, 0x4b, 0xad, 0x80, 0xed, 0x0e, 0xda, 0xaa, 0xc0, 0x86, 0x3e, 0x83,
	0xc4, 0xa2, 0x28, 0x2f, 0x54, 0x7a, 0xb7, 0x09, 0xad, 0x4a, 0xb1, 0x9c, 0xe2, 0x51, 0x40, 0xf1,
	0x00, 0xdd, 0x2f, 0xa2, 0x48, 0x5a, 0x47, 0xc1, 0x73, 0x42, 0xa7, 0x03, 0x2e, 0xd3, 0x27, 0x00,
	0x97, 0x63, 0xe9, 0xff, 0x4b, 0x9f, 0xca, 0x48, 0xd9, 0x3b, 0xb8, 0xfc, 0x47, 0x97, 0x87, 0x84,
	0xc6, 0x20, 0x79, 0xf3, 0x51, 0xab, 0xfc, 0x5d, 0x48, 0xed, 0x2b, 0xe1, 0x5e, 0xb5, 0xe0, 0xd3,
	0x0a, 0x14, 0xbd, 0xed, 0x42, 0x81, 0xbe, 0x00, 0xb8, 0x12, 0xcf, 0xef, 0x2b, 0xd4, 0x2a, 0x7f,
	0x0b, 0xaa, 0x52, 0xe5, 0xac, 0xd6, 0xea, 0x1a, 0x45, 0x54, 0xbb, 0x4f, 0x8e, 0x27, 0x22, 0x18,
	0x4f, 0x44, 0xf0, 0x7b, 0x22, 0x82, 0x77, 0x53, 0xb1, 0x31, 0x9e, 0x8a, 0x8d, 0x9f, 0x53, 0xb1,
	0xf1, 0x62, 0xc3, 0x20, 0x5e, 0x6f, 0xd0, 0x95, 0x35, 0xda, 0x9f, 0x97, 0xfd, 0x65, 0x90, 0xdf,
	0x1b, 0xd9, 0x98, 0x75, 0xcf, 0x06, 0x8f, 0xdc, 0xad, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x72,
	0xcd, 0x01, 0x2a, 0xbe, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a Pending ICQ Request by id.
	PendingICQsRequest(ctx context.Context, in *QueryGetPendingICQsRequest, opts ...grpc.CallOption) (*QueryGetPendingICQsRequestResponse, error)
	// Queries a list of Pending ICQ Request items.
	PendingICQsRequestAll(ctx context.Context, in *QueryAllPendingICQsRequest, opts ...grpc.CallOption) (*QueryAllPendingICQsRequestResponse, error)
	// Queries a Timedout ICQ by id.
	ICQTimeouts(ctx context.Context, in *QueryGetICQTimeoutsRequest, opts ...grpc.CallOption) (*QueryGetICQTimeoutsResponse, error)
	// Queries a list of ICQ Timedout items.
	ICQTimeoutsAll(ctx context.Context, in *QueryAllICQTimeoutsRequest, opts ...grpc.CallOption) (*QueryAllICQTimeoutsResponse, error)
	// Queries a periodic ICQ
	PeriodicICQs(ctx context.Context, in *QueryGetPeriodicICQsRequest, opts ...grpc.CallOption) (*QueryGetPeriodicICQsResponse, error)
	// Queries a list of all periodic ICQs
	PeriodicICQsAll(ctx context.Context, in *QueryAllPeriodicICQsRequest, opts ...grpc.CallOption) (*QueryAllPeriodicICQsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PendingICQsRequest(ctx context.Context, in *QueryGetPendingICQsRequest, opts ...grpc.CallOption) (*QueryGetPendingICQsRequestResponse, error) {
	out := new(QueryGetPendingICQsRequestResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/PendingICQsRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingICQsRequestAll(ctx context.Context, in *QueryAllPendingICQsRequest, opts ...grpc.CallOption) (*QueryAllPendingICQsRequestResponse, error) {
	out := new(QueryAllPendingICQsRequestResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/PendingICQsRequestAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ICQTimeouts(ctx context.Context, in *QueryGetICQTimeoutsRequest, opts ...grpc.CallOption) (*QueryGetICQTimeoutsResponse, error) {
	out := new(QueryGetICQTimeoutsResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/ICQTimeouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ICQTimeoutsAll(ctx context.Context, in *QueryAllICQTimeoutsRequest, opts ...grpc.CallOption) (*QueryAllICQTimeoutsResponse, error) {
	out := new(QueryAllICQTimeoutsResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/ICQTimeoutsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PeriodicICQs(ctx context.Context, in *QueryGetPeriodicICQsRequest, opts ...grpc.CallOption) (*QueryGetPeriodicICQsResponse, error) {
	out := new(QueryGetPeriodicICQsResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/PeriodicICQs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PeriodicICQsAll(ctx context.Context, in *QueryAllPeriodicICQsRequest, opts ...grpc.CallOption) (*QueryAllPeriodicICQsResponse, error) {
	out := new(QueryAllPeriodicICQsResponse)
	err := c.cc.Invoke(ctx, "/simplyvc.interchainqueries.icq.Query/PeriodicICQsAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a Pending ICQ Request by id.
	PendingICQsRequest(context.Context, *QueryGetPendingICQsRequest) (*QueryGetPendingICQsRequestResponse, error)
	// Queries a list of Pending ICQ Request items.
	PendingICQsRequestAll(context.Context, *QueryAllPendingICQsRequest) (*QueryAllPendingICQsRequestResponse, error)
	// Queries a Timedout ICQ by id.
	ICQTimeouts(context.Context, *QueryGetICQTimeoutsRequest) (*QueryGetICQTimeoutsResponse, error)
	// Queries a list of ICQ Timedout items.
	ICQTimeoutsAll(context.Context, *QueryAllICQTimeoutsRequest) (*QueryAllICQTimeoutsResponse, error)
	// Queries a periodic ICQ
	PeriodicICQs(context.Context, *QueryGetPeriodicICQsRequest) (*QueryGetPeriodicICQsResponse, error)
	// Queries a list of all periodic ICQs
	PeriodicICQsAll(context.Context, *QueryAllPeriodicICQsRequest) (*QueryAllPeriodicICQsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PendingICQsRequest(ctx context.Context, req *QueryGetPendingICQsRequest) (*QueryGetPendingICQsRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingICQsRequest not implemented")
}
func (*UnimplementedQueryServer) PendingICQsRequestAll(ctx context.Context, req *QueryAllPendingICQsRequest) (*QueryAllPendingICQsRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingICQsRequestAll not implemented")
}
func (*UnimplementedQueryServer) ICQTimeouts(ctx context.Context, req *QueryGetICQTimeoutsRequest) (*QueryGetICQTimeoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ICQTimeouts not implemented")
}
func (*UnimplementedQueryServer) ICQTimeoutsAll(ctx context.Context, req *QueryAllICQTimeoutsRequest) (*QueryAllICQTimeoutsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ICQTimeoutsAll not implemented")
}
func (*UnimplementedQueryServer) PeriodicICQs(ctx context.Context, req *QueryGetPeriodicICQsRequest) (*QueryGetPeriodicICQsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeriodicICQs not implemented")
}
func (*UnimplementedQueryServer) PeriodicICQsAll(ctx context.Context, req *QueryAllPeriodicICQsRequest) (*QueryAllPeriodicICQsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeriodicICQsAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PendingICQsRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingICQsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingICQsRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/PendingICQsRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingICQsRequest(ctx, req.(*QueryGetPendingICQsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingICQsRequestAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingICQsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingICQsRequestAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/PendingICQsRequestAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingICQsRequestAll(ctx, req.(*QueryAllPendingICQsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ICQTimeouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetICQTimeoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ICQTimeouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/ICQTimeouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ICQTimeouts(ctx, req.(*QueryGetICQTimeoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ICQTimeoutsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllICQTimeoutsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ICQTimeoutsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/ICQTimeoutsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ICQTimeoutsAll(ctx, req.(*QueryAllICQTimeoutsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PeriodicICQs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPeriodicICQsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PeriodicICQs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/PeriodicICQs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PeriodicICQs(ctx, req.(*QueryGetPeriodicICQsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PeriodicICQsAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPeriodicICQsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PeriodicICQsAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simplyvc.interchainqueries.icq.Query/PeriodicICQsAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PeriodicICQsAll(ctx, req.(*QueryAllPeriodicICQsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "simplyvc.interchainqueries.icq.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PendingICQsRequest",
			Handler:    _Query_PendingICQsRequest_Handler,
		},
		{
			MethodName: "PendingICQsRequestAll",
			Handler:    _Query_PendingICQsRequestAll_Handler,
		},
		{
			MethodName: "ICQTimeouts",
			Handler:    _Query_ICQTimeouts_Handler,
		},
		{
			MethodName: "ICQTimeoutsAll",
			Handler:    _Query_ICQTimeoutsAll_Handler,
		},
		{
			MethodName: "PeriodicICQs",
			Handler:    _Query_PeriodicICQs_Handler,
		},
		{
			MethodName: "PeriodicICQsAll",
			Handler:    _Query_PeriodicICQsAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "icq/query.proto",
}

func (m *QueryGetPendingICQsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingICQsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingICQsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingICQsRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingICQsRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingICQsRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingICQsRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingICQsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingICQsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingICQsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingICQsRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingICQsRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingICQsRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingICQsRequest) > 0 {
		for iNdEx := len(m.PendingICQsRequest) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingICQsRequest[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetICQTimeoutsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetICQTimeoutsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetICQTimeoutsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetICQTimeoutsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetICQTimeoutsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetICQTimeoutsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ICQTimeouts.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllICQTimeoutsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllICQTimeoutsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllICQTimeoutsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllICQTimeoutsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllICQTimeoutsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllICQTimeoutsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ICQTimeouts) > 0 {
		for iNdEx := len(m.ICQTimeouts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ICQTimeouts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPeriodicICQsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPeriodicICQsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPeriodicICQsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPeriodicICQsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPeriodicICQsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPeriodicICQsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PeriodicICQs.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPeriodicICQsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPeriodicICQsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPeriodicICQsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPeriodicICQsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPeriodicICQsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPeriodicICQsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PeriodicICQs) > 0 {
		for iNdEx := len(m.PeriodicICQs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PeriodicICQs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetPendingICQsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPendingICQsRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingICQsRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPendingICQsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPendingICQsRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingICQsRequest) > 0 {
		for _, e := range m.PendingICQsRequest {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetICQTimeoutsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetICQTimeoutsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ICQTimeouts.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllICQTimeoutsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllICQTimeoutsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ICQTimeouts) > 0 {
		for _, e := range m.ICQTimeouts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPeriodicICQsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPeriodicICQsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PeriodicICQs.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPeriodicICQsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPeriodicICQsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PeriodicICQs) > 0 {
		for _, e := range m.PeriodicICQs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetPendingICQsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingICQsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingICQsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingICQsRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingICQsRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingICQsRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingICQsRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingICQsRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingICQsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingICQsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingICQsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingICQsRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingICQsRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingICQsRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingICQsRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingICQsRequest = append(m.PendingICQsRequest, PendingICQsRequest{})
			if err := m.PendingICQsRequest[len(m.PendingICQsRequest)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetICQTimeoutsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetICQTimeoutsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetICQTimeoutsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetICQTimeoutsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetICQTimeoutsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetICQTimeoutsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ICQTimeouts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllICQTimeoutsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllICQTimeoutsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllICQTimeoutsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllICQTimeoutsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllICQTimeoutsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllICQTimeoutsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ICQTimeouts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ICQTimeouts = append(m.ICQTimeouts, ICQTimeouts{})
			if err := m.ICQTimeouts[len(m.ICQTimeouts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPeriodicICQsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPeriodicICQsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPeriodicICQsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPeriodicICQsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPeriodicICQsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPeriodicICQsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicICQs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PeriodicICQs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPeriodicICQsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPeriodicICQsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPeriodicICQsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPeriodicICQsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPeriodicICQsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPeriodicICQsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicICQs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeriodicICQs = append(m.PeriodicICQs, PeriodicICQs{})
			if err := m.PeriodicICQs[len(m.PeriodicICQs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
