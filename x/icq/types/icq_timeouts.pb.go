// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: icq/icq_timeouts.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ICQTimeouts struct {
	PeriodicId        uint64 `protobuf:"varint,1,opt,name=periodic_id,json=periodicId,proto3" json:"periodic_id,omitempty"`
	Timeouts          uint64 `protobuf:"varint,2,opt,name=timeouts,proto3" json:"timeouts,omitempty"`
	LastTimeoutHeight uint64 `protobuf:"varint,3,opt,name=last_timeout_height,json=lastTimeoutHeight,proto3" json:"last_timeout_height,omitempty"`
}

func (m *ICQTimeouts) Reset()         { *m = ICQTimeouts{} }
func (m *ICQTimeouts) String() string { return proto.CompactTextString(m) }
func (*ICQTimeouts) ProtoMessage()    {}
func (*ICQTimeouts) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f3f372cf7d8a9ba, []int{0}
}
func (m *ICQTimeouts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICQTimeouts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICQTimeouts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICQTimeouts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICQTimeouts.Merge(m, src)
}
func (m *ICQTimeouts) XXX_Size() int {
	return m.Size()
}
func (m *ICQTimeouts) XXX_DiscardUnknown() {
	xxx_messageInfo_ICQTimeouts.DiscardUnknown(m)
}

var xxx_messageInfo_ICQTimeouts proto.InternalMessageInfo

func (m *ICQTimeouts) GetPeriodicId() uint64 {
	if m != nil {
		return m.PeriodicId
	}
	return 0
}

func (m *ICQTimeouts) GetTimeouts() uint64 {
	if m != nil {
		return m.Timeouts
	}
	return 0
}

func (m *ICQTimeouts) GetLastTimeoutHeight() uint64 {
	if m != nil {
		return m.LastTimeoutHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*ICQTimeouts)(nil), "simplyvc.interchainqueries.icq.ICQTimeouts")
}

func init() { proto.RegisterFile("icq/icq_timeouts.proto", fileDescriptor_5f3f372cf7d8a9ba) }

var fileDescriptor_5f3f372cf7d8a9ba = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x4c, 0x2e, 0xd4,
	0xcf, 0x4c, 0x2e, 0x8c, 0x2f, 0xc9, 0xcc, 0x4d, 0xcd, 0x2f, 0x2d, 0x29, 0xd6, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x92, 0x2b, 0xce, 0xcc, 0x2d, 0xc8, 0xa9, 0x2c, 0x4b, 0xd6, 0xcb, 0xcc, 0x2b,
	0x49, 0x2d, 0x4a, 0xce, 0x48, 0xcc, 0xcc, 0x2b, 0x2c, 0x4d, 0x2d, 0xca, 0x4c, 0x2d, 0xd6, 0xcb,
	0x4c, 0x2e, 0x54, 0xaa, 0xe2, 0xe2, 0xf6, 0x74, 0x0e, 0x0c, 0x81, 0x6a, 0x12, 0x92, 0xe7, 0xe2,
	0x2e, 0x48, 0x2d, 0xca, 0xcc, 0x4f, 0xc9, 0x4c, 0x8e, 0xcf, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4,
	0x60, 0x09, 0xe2, 0x82, 0x09, 0x79, 0xa6, 0x08, 0x49, 0x71, 0x71, 0xc0, 0x6c, 0x90, 0x60, 0x02,
	0xcb, 0xc2, 0xf9, 0x42, 0x7a, 0x5c, 0xc2, 0x39, 0x89, 0xc5, 0x25, 0x30, 0x27, 0xc4, 0x67, 0xa4,
	0x66, 0xa6, 0x67, 0x94, 0x48, 0x30, 0x83, 0x95, 0x09, 0x82, 0xa4, 0xa0, 0xf6, 0x78, 0x80, 0x25,
	0x9c, 0xbc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09,
	0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x30, 0x3d, 0xb3,
	0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xe6, 0x01, 0x7d, 0x0c, 0x0f, 0xe8, 0x57,
	0x80, 0x7c, 0xac, 0x5f, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0xf6, 0xaf, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x6d, 0x9b, 0x39, 0x2b, 0x09, 0x01, 0x00, 0x00,
}

func (m *ICQTimeouts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICQTimeouts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICQTimeouts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastTimeoutHeight != 0 {
		i = encodeVarintIcqTimeouts(dAtA, i, uint64(m.LastTimeoutHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.Timeouts != 0 {
		i = encodeVarintIcqTimeouts(dAtA, i, uint64(m.Timeouts))
		i--
		dAtA[i] = 0x10
	}
	if m.PeriodicId != 0 {
		i = encodeVarintIcqTimeouts(dAtA, i, uint64(m.PeriodicId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIcqTimeouts(dAtA []byte, offset int, v uint64) int {
	offset -= sovIcqTimeouts(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ICQTimeouts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeriodicId != 0 {
		n += 1 + sovIcqTimeouts(uint64(m.PeriodicId))
	}
	if m.Timeouts != 0 {
		n += 1 + sovIcqTimeouts(uint64(m.Timeouts))
	}
	if m.LastTimeoutHeight != 0 {
		n += 1 + sovIcqTimeouts(uint64(m.LastTimeoutHeight))
	}
	return n
}

func sovIcqTimeouts(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIcqTimeouts(x uint64) (n int) {
	return sovIcqTimeouts(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ICQTimeouts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIcqTimeouts
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICQTimeouts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICQTimeouts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodicId", wireType)
			}
			m.PeriodicId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqTimeouts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodicId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeouts", wireType)
			}
			m.Timeouts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqTimeouts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timeouts |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTimeoutHeight", wireType)
			}
			m.LastTimeoutHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIcqTimeouts
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTimeoutHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIcqTimeouts(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIcqTimeouts
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIcqTimeouts(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIcqTimeouts
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIcqTimeouts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIcqTimeouts
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIcqTimeouts
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIcqTimeouts
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIcqTimeouts
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIcqTimeouts        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIcqTimeouts          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIcqTimeouts = fmt.Errorf("proto: unexpected end of group")
)
